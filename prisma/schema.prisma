// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider            = "typegraphql-prisma"
  formatGeneratedCode = false
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId       Int      @id @default(autoincrement())
  username     String
  name         String
  email        String   @unique
  passwordHash String
  passwordSalt String
  createdAt    DateTime @default(now())

  // Foreign Keys
  projects Project[]
  roles    UserRoleMap[]
  tokens   UserProjectToken[]
  schemas  Schema[]
  queries  Query[]
}

model Permission {
  permissionId   Int                 @id @default(autoincrement())
  permissionName String
  roles          RolePermissionMap[]
}

model Role {
  roleId   Int    @default(autoincrement())
  roleName String

  // Foreign Keys
  projectId Int
  project   Project @relation(fields: [projectId], references: [projectId])

  permissions RolePermissionMap[]
  users       UserRoleMap[]

  // Multi-Attribute Primary Key
  @@id([roleId, projectId])
}

model RolePermissionMap {
  // Foreign Keys
  roleId    Int
  projectId Int
  role      Role @relation(fields: [roleId, projectId], references: [roleId, projectId])

  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [permissionId])

  // Multi-Attribute Primary Key
  @@id([roleId, permissionId])
}

model UserRoleMap {
  // Foreign Keys
  userId Int
  user   User @relation(fields: [userId], references: [userId])

  roleId    Int
  projectId Int
  role      Role @relation(fields: [roleId, projectId], references: [roleId, projectId])

  // Multi-Attribute Primary Key
  @@id([userId, roleId, projectId])
}

model Project {
  projectId   Int      @id @default(autoincrement())
  projectName String
  connUrl     String
  createdAt   DateTime @default(now())

  // Foreign Keys
  createdById Int
  createdBy   User @relation(fields: [createdById], references: [userId])

  roles   Role[]
  tokens  UserProjectToken[]
  schemas Schema[]
  queries Query[]
}

model UserProjectToken {
  accessToken String @unique

  // Foreign Keys
  userId Int
  user   User @relation(fields: [userId], references: [userId])

  projectId Int
  project   Project @relation(fields: [projectId], references: [projectId])

  // Multi-Attribute Primary Key
  @@id([userId, projectId])
}

model Schema {
  schemaId   Int      @id @default(autoincrement())
  schemaName String
  createdAt  DateTime @default(now())

  // Foreign Keys
  projectId Int
  project   Project @relation(fields: [projectId], references: [projectId])

  createdById Int
  createdBy   User @relation(fields: [createdById], references: [userId])

  tables Table[]
}

model Table {
  tableId   Int    @id @default(autoincrement())
  tableName String

  // Foreign Keys
  schemaId Int
  schema   Schema @relation(fields: [schemaId], references: [schemaId])

  snapshots TableStorageSnapshot[]
  columns   Column[]
  queries   QueryTableAccess[]

  // Constraints
  @@unique([schemaId, tableName])
}

model TableStorageSnapshot {
  createdAt DateTime @default(now())
  rowCount  Int
  sizeBytes Int

  // Foreign Keys
  tableId Int
  table   Table @relation(fields: [tableId], references: [tableId])

  // Multi-Attribute Primary Key
  @@id([tableId, createdAt])
}

model ColumnType {
  columnTypeId   Int    @id @default(autoincrement())
  columnTypeName String

  // Foreign Keys
  columns Column[]
}

model Column {
  columnId   Int    @id @default(autoincrement())
  columnName String

  // Foreign Keys
  tableId Int
  table   Table @relation(fields: [tableId], references: [tableId])

  columnTypeId Int
  columnType   ColumnType          @relation(fields: [columnTypeId], references: [columnTypeId])
  queries      QueryColumnAccess[]

  // Constraints
  @@unique([tableId, columnName])
}

model QueryType {
  queryTypeId   Int    @id @default(autoincrement())
  queryTypeName String

  // Foreign Keys
  queries Query[]
}

model Query {
  queryId      Int       @id @default(autoincrement())
  statement    String
  issuedAt     DateTime  @default(now())
  finishedAt   DateTime?
  hasError     Boolean   @default(false)
  errorMessage String?

  // Foreign Keys
  userId Int
  user   User @relation(fields: [userId], references: [userId])

  projectId Int
  project   Project @relation(fields: [projectId], references: [projectId])

  queryTypeId Int
  queryType   QueryType @relation(fields: [queryTypeId], references: [queryTypeId])

  columns          QueryColumnAccess[]
  QueryTableAccess QueryTableAccess[]
}

model QueryColumnAccess {
  // Foreign Keys
  queryId Int
  query   Query @relation(fields: [queryId], references: [queryId])

  columnId Int
  column   Column @relation(fields: [columnId], references: [columnId])

  // Multi-Attribute Primary Key
  @@id([queryId, columnId])
}

model QueryTableAccess {
  // Foreign Keys
  queryId Int
  query   Query @relation(fields: [queryId], references: [queryId])

  tableId Int
  table   Table @relation(fields: [tableId], references: [tableId])

  // Multi-Attribute Primary Key
  @@id([queryId, tableId])
}
